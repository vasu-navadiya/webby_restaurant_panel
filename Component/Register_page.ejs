<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Register Restaurant</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <style>
      body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 40px 0;
      }

      .container {
        max-width: 800px;
        padding: 40px;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        background-color: white;
        margin: 20px auto;
      }

      h2 {
        color: #2d3748;
        font-size: 28px;
        font-weight: 700;
        text-align: center;
        margin-bottom: 30px;
      }

      h3 {
        color: #2d3748;
        font-size: 20px;
        font-weight: 600;
        margin: 20px 0;
      }

      .divider {
        width: 100%;
        height: 1px;
        background: linear-gradient(to right, #667eea, #764ba2);
        margin: 25px 0;
        opacity: 0.2;
      }

      .form-group {
        margin-bottom: 20px;
      }

      label {
        font-weight: 600;
        color: #4a5568;
        margin-bottom: 8px;
        display: block;
      }

      input {
        height: 50px;
        padding: 10px 20px;
        border: 1px solid #e2e8f0;
        border-radius: 10px;
        transition: all 0.3s ease;
        width: 100%;
        font-size: 14px;
      }

      input:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        outline: none;
      }

      .error {
        color: #e53e3e;
        font-size: 13px;
        margin-top: 6px;
        font-weight: 500;
      }

      .map-placeholder {
        width: 100%;
        height: 200px;
        background: linear-gradient(45deg, #f6f6f6 25%, #f0f0f0 25%, #f0f0f0 50%, #f6f6f6 50%, #f6f6f6 75%, #f0f0f0 75%, #f0f0f0 100%);
        background-size: 20px 20px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 16px;
        color: #718096;
        border-radius: 10px;
        margin: 20px 0;
        border: 2px dashed #cbd5e0;
      }

      .button {
        width: 100%;
        height: 50px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 10px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 2px;
      }

      .button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
      }

      /* Two column layout for larger screens */
      @media (min-width: 768px) {
        .form-row {
          display: flex;
          gap: 20px;
        }

        .form-row .form-group {
          flex: 1;
        }
      }

      @media (max-width: 768px) {
        .container {
          padding: 20px;
          margin: 10px;
        }

        h2 {
          font-size: 24px;
        }

        input {
          height: 45px;
        }
      }


/* Image Gallery Section Styles */
.form-section {
  margin: 30px 0;
}

.section-header {
  margin-bottom: 25px;
  text-align: left;
}

.section-header h3 {
  font-size: 1.5rem;
  color: #333;
  margin-bottom: 8px;
  font-weight: 600;
}

.section-description {
  color: #6c757d;
  font-size: 0.9rem;
}

.image-gallery-section {
  background-color: #f8f9fa;
  border-radius: 8px;
  padding-top: 2px;
  padding-left: 25px;
  margin-top: 10px;
  border: 1px solid #e2e8f0;
}

.image-upload-container {
  margin-top: 10px;
}

.upload-box {
  background-color: white;
  border-radius: 6px;
  padding: 15px;
  /* margin-bottom: 20px; */
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
  border: 1px dashed #cbd5e0;
}

.upload-box:hover {
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
  border-color: #4299e1;
}

.input-label {
  display: block;
  margin-bottom: 10px;
  font-weight: 500;
  color: #2d3748;
}

.input-label i {
  color: #4299e1;
}

.preview-container {
  height: 150px;
  background-color: #f7fafc;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 10px;
  overflow: hidden;
  border: 1px solid #edf2f7;
}

.preview-placeholder {
  text-align: center;
  color: #a0aec0;
}

.preview-placeholder i {
  font-size: 30px;
  margin-bottom: 8px;
}

/* Responsive fixes */
@media (max-width: 768px) {
  .col-md-6 {
    width: 100%;
  }
}

/* Fix same-ID issue with preview5 */
#preview6 {
  /* Same styles as other preview containers */
  height: 100px;
  background-color: #f7fafc;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 10px;
  overflow: hidden;
  border: 1px solid #edf2f7;
}


.upload-box {
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 15px;
    background-color: #f9f9f9;
  }
  
  .input-label {
    font-weight: 600;
    margin-bottom: 8px;
    display: block;
  }
  
  .image-preview-container {
    width: 100%;
    height: 100px;
    border: 1px dashed #ccc;
    border-radius: 4px;
    /* margin-top: 1px; */
    overflow: hidden;
    position: relative;
    background-color: #f5f5f5;
  }
  
  .image-preview-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
  }
  
  .image-preview-wrapper img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
  }
  
  .remove-image {
  position: absolute;
  top: 10px;
  right: 10px;
  background: rgba(255, 255, 255, 0.9);
  border-radius: 50%;
  width: 28px;
  height: 28px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  transition: all 0.2s ease;
  border: 1px solid rgba(206, 26, 26, 0.3);
}

.remove-image:hover {
  background: rgba(255, 255, 255, 1);
  transform: scale(1.1);
  box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);
}

.remove-image:active {
  transform: scale(0.95);
}

/* Cross symbol using ::before and ::after */
.remove-image::before,
.remove-image::after {
  content: '';
  position: absolute;
  width: 14px;
  height: 2px;
  background-color: #070000;
  border-radius: 1px;
  transition: all 0.2s ease;
}

.remove-image::before {
  transform: rotate(45deg);
}

.remove-image::after {
  transform: rotate(-45deg);
}

.remove-image:hover::before,
.remove-image:hover::after {
  background-color: #ff0000;
  width: 16px;
}
  .placeholder-text {
    color: #aaa;
    font-size: 14px;
  }
  .location-container {
  margin: 20px 0;
}

.location-box {
  background: white;
  border-radius: 15px;
  padding: 20px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
  border: 1px solid #e2e8f0;
}

.coordinates-display {
  background: #f8fafc;
  border-radius: 10px;
  padding: 15px;
  margin-bottom: 15px;
}

.coordinate-item {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 10px;
  color: #4a5568;
  font-size: 0.95rem;
}

.coordinate-item:last-child {
  margin-bottom: 0;
}

.coordinate-item i {
  color: #667eea;
  font-size: 1.1rem;
}

.get-location-btn {
  width: 100%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border: none;
  border-radius: 10px;
  padding: 12px 20px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
}

.get-location-btn i {
  font-size: 1.1rem;
}

.get-location-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
}

.get-location-btn.loading {
  opacity: 0.8;
  cursor: not-allowed;
}

.get-location-btn.loading i {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Success state */
.coordinates-display.has-coordinates {
  background: #f0fff4;
  border: 1px solid #c6f6d5;
}

.coordinates-display.has-coordinates .coordinate-item i {
  color: #48bb78;
}

    </style>
  </head>
  <body>
    <div class="container">
      <h2>Register Your Restaurant</h2>
      <div class="divider"></div>

      <form id="registerForm" action="/Register_page" method="POST" enctype="multipart/form-data">
        <div class="form-row">
          <div class="form-group">
            <label>Restaurant Name</label>
            <input type="text" id="restaurantName" name="restaurantName" placeholder="Enter restaurant name" />
            <div class="error" id="restaurantNameError"></div>
          </div>

          <div class="form-group">
            <label>Owner Full Name</label>
            <input type="text" id="ownerName" name="ownerName" placeholder="Enter owner name" />
            <div class="error" id="ownerNameError"></div>
          </div>
        </div>

        <div class="form-row">
          <div class="form-group">
            <label>Email</label>
            <input type="email" id="email" name="email" placeholder="Enter email" />
            <div class="error" id="emailError"></div>
          </div>

          <div class="form-group">
            <label>Phone Number</label>
            <input type="text" id="phone" name="phone" placeholder="Enter phone number" />
            <div class="error" id="phoneError"></div>
          </div>
        </div>

        <div class="form-row">
          <div class="form-group">
            <label>Password</label>
            <input type="password" id="password" name="password" placeholder="Enter password" />
            <div class="error" id="passwordError"></div>
          </div>

          <div class="form-group">
            <label>Confirm Password</label>
            <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm password" />
            <div class="error" id="confirmPasswordError"></div>
          </div>
        </div>
        <div class="form-row">

          <div class="form-group">
            <label>Openning Time</label>
            <input type="open" id="open" name="open" placeholder="Enter Openning" />
            <div class="error" id="timeError"></div>
          </div>

          <div class="form-group">
            <label>Closing Time</label>
            <input type="close" id="close" name="close" placeholder="Enter Closing" />
            <div class="error" id="timeError"></div>
          </div>
        </div>

        <div class="form-row">
  <div class="form-group" style="width: 100%;">
    <label>Restaurant Cuisine</label>
    <input 
      type="text" 
      id="cuisine" 
      name="cuisine" 
      placeholder="Enter cuisines (e.g., Indian, Chinese, Italian)" 
    />
    <div class="error" id="cuisineError"></div>
  </div>
  
</div>
        
        <div class="divider"></div>


        <h3>Restaurant Location</h3>
        <!-- <div class="location-container">
          <div class="location-box">
            <div class="coordinates-display" id="coordinatesDisplay">
              <div class="coordinate-item">
                <i class="fas fa-map-marker-alt"></i>
                <span>Latitude: <span id="latitudeValue">Not set</span></span>
              </div>
              <div class="coordinate-item">
                <i class="fas fa-map-marker-alt"></i>
                <span>Longitude: <span id="longitudeValue">Not set</span></span>
              </div>
            </div>
            <button type="button" class="get-location-btn" id="getLocationBtn" onclick="getLocation()">
              <i class="fas fa-location-arrow"></i>
              Get Current Location
            </button>
          </div>
          <!-- Add hidden inputs to store coordinates 
          <input type="hidden" id="latitude" name="latitude">
          <input type="hidden" id="longitude" name="longitude">
        </div> -->
        <div class="location-container">
          <div class="location-box">
            <div class="coordinates-display" id="coordinatesDisplay">
              <div class="coordinate-item">
                <i class="fas fa-map-marker-alt"></i>
                <span>Latitude: <span id="latitudeValue">Not set</span></span>
              </div>
              <div class="coordinate-item">
                <i class="fas fa-map-marker-alt"></i>
                <span>Longitude: <span id="longitudeValue">Not set</span></span>
              </div>
              <div class="coordinate-item">
                <i class="fas fa-map"></i>
                <span>Address: <span id="addressValue">Not set</span></span>
              </div>
            </div>
            <button type="button" class="get-location-btn" id="getLocationBtn" onclick="getLocation()">
              <i class="fas fa-location-arrow"></i>
              Get Current Location
            </button>
          </div>
        
          <!-- Hidden inputs to store coordinates and address -->
          <input type="hidden" id="latitude" name="latitude">
          <input type="hidden" id="longitude" name="longitude">
          <input type="hidden" id="address" name="address">
        </div>
        <div class="form-row">
          <div class="form-group">
            <label>Shop / Building No.</label>
            <input type="text" id="shopNo" name="shopNo" placeholder="Enter shop/building number" />
          </div>

          <div class="form-group">
            <label>Floor / Tower No.</label>
            <input type="text" id="floorNo" name="floorNo" placeholder="Enter floor/tower number" />
          </div>
        </div>

        <div class="form-row">
          <div class="form-group">
            <label>Area</label>
            <input type="text" id="area" name="area" placeholder="Enter area" />
          </div>

          <div class="form-group">
            <label>City</label>
            <input type="text" id="city" name="city" placeholder="Enter city" />
          </div>
        </div>
                     <!-- <div class="col-md-6">
                        <div class="upload-box">
                            <label class="input-label">
                                <i class="fas fa-door-open me-1"></i> Interior View
                            </label>
                            <input type="file" class="form-control" name="galleryImages" accept="image/*" onchange="previewImage(this, 'preview2')">
                            <div class="preview-container" id="preview2">
                                <div class="preview-placeholder">
                                    <i class="fas fa-image"></i>
                                    <p class="mb-0 small">Interior view</p>
                                </div>
                            </div>
                        </div>
                    </div>
            
                    <div class="col-md-6">
                        <div class="upload-box">
                            <label class="input-label">
                                <i class="fas fa-utensils me-1"></i> Dining Area
                            </label>
                            <input type="file" class="form-control" name="galleryImages" accept="image/*" onchange="previewImage(this, 'preview3')">
                            <div class="preview-container" id="preview3">
                                <div class="preview-placeholder">
                                    <i class="fas fa-image"></i>
                                    <p class="mb-0 small">Dining area</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                      <div class="upload-box">
                          <label class="input-label">
                              <i class="fas fa-kitchen-set me-1"></i> Kitchen View
                          </label>
                          <input type="file" class="form-control" name="galleryImages" accept="image/*" onchange="previewImage(this, 'preview4')">
                          <div class="preview-container" id="preview4">
                              <div class="preview-placeholder">
                                  <i class="fas fa-image"></i>
                                  <p class="mb-0 small">Kitchen view</p>
                              </div>
                          </div>
                      </div>
                  </div>
          
                  <div class="col-md-6">
                      <div class="upload-box">
                          <label class="input-label">
                              <i class="fas fa-star me-1"></i> Special Feature 1
                          </label>
                          <input type="file" class="form-control" name="galleryImages" accept="image/*" onchange="previewImage(this, 'preview5')">
                          <div class="preview-container" id="preview5">
                              <div class="preview-placeholder">
                                  <i class="fas fa-image"></i>
                                  <p class="mb-0 small">Special feature</p>
                              </div>
                          </div>
                      </div>
                  </div>
                  <div class="col-md-6">
                      <div class="upload-box">
                          <label class="input-label">
                              <i class="fas fa-star me-1"></i> Special Feature 2
                          </label>
                          <input type="file" class="form-control" name="galleryImages" accept="image/*" onchange="previewImage(this, 'preview5')">
                          <div class="preview-container" id="preview5">
                              <div class="preview-placeholder">
                                  <i class="fas fa-image"></i>
                                  <p class="mb-0 small">Special feature</p>
                              </div>
                          </div>
                      </div>
                  </div> -->
<!-- Restaurant Images Section -->
<div class="form-section image-gallery-section">
  <div class="section-header">
    <h3>Restaurant Images</h3>
    <p class="section-description">Upload high-quality photos to showcase your restaurant</p>
  </div>
  
  <div class="row image-upload-container">
    <!-- Front View -->
    <div class="col-md-6 mb-4">
      <div class="upload-box">
        <label class="input-label">
          Front View
        </label>
        <input type="file" class="form-control" name="galleryImages" accept="image/*" onchange="previewImage(this, 'preview-front')">
        <div id="preview-front" class="image-preview-container">
          <div class="image-preview-wrapper">
            <!-- Image will be inserted here -->
          </div>
        </div>
      </div>
    </div>
    <!-- Interior View -->
    <div class="col-md-6 mb-4">
      <div class="upload-box">
        <label class="input-label">
          Interior View
        </label>
        <input type="file" class="form-control" name="galleryImages" accept="image/*" onchange="previewImage(this, 'preview-interior')">
        <div id="preview-interior" class="image-preview-container">
          <div class="image-preview-wrapper">
            <!-- Image will be inserted here -->
          </div>
        </div>
      </div>
    </div>
    
    <!-- Dining Area -->
    <div class="col-md-6 mb-4">
      <div class="upload-box">
        <label class="input-label">
          Dining Area
        </label>
        <input type="file" class="form-control" name="galleryImages" accept="image/*" onchange="previewImage(this, 'preview-dining')">
        <div id="preview-dining" class="image-preview-container">
          <div class="image-preview-wrapper">
            <!-- Image will be inserted here -->
          </div>
        </div>
      </div>
    </div>
    
    <!-- Kitchen View -->
    <div class="col-md-6 mb-4">
      <div class="upload-box">
        <label class="input-label">
          Kitchen View
        </label>
        <input type="file" class="form-control" name="galleryImages" accept="image/*" onchange="previewImage(this, 'preview-kitchen')">
        <div id="preview-kitchen" class="image-preview-container">
          <div class="image-preview-wrapper">
            <!-- Image will be inserted here -->
          </div>
        </div>
      </div>
    </div>
    
    <!-- Special Feature 1 -->
    <div class="col-md-6 mb-4">
      <div class="upload-box">
        <label class="input-label">
          Special Feature 1
        </label>
        <input type="file" class="form-control" name="galleryImages" accept="image/*" onchange="previewImage(this, 'preview-feature1')">
        <div id="preview-feature1" class="image-preview-container">
          <div class="image-preview-wrapper">
            <!-- Image will be inserted here -->
          </div>
        </div>
      </div>
    </div>
    
    <!-- Special Feature 2 -->
    <div class="col-md-6 mb-4">
      <div class="upload-box">
        <label class="input-label">
          Special Feature 2
        </label>
        <input type="file" class="form-control" name="galleryImages" accept="image/*" onchange="previewImage(this, 'preview-feature2')">
        <div id="preview-feature2" class="image-preview-container">
          <div class="image-preview-wrapper">
            <!-- Image will be inserted here -->
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
        <button type="submit" class="button" onclick="validateForm(event)">
          Register Restaurant
        </button>
      </form>
    </div>

    <script>
      function validateForm(event) {
        event.preventDefault(); // Prevents form from submitting if validation fails
        let isValid = true;

        // Clear previous error messages
        document.getElementById("restaurantNameError").innerText = "";
        document.getElementById("ownerNameError").innerText = "";
        document.getElementById("emailError").innerText = "";
        document.getElementById("phoneError").innerText = "";
        document.getElementById("passwordError").innerText = "";
        document.getElementById("confirmPasswordError").innerText = "";
        document.getElementById("timeError").innerText = "";

        

        // Get input values
        let restaurantName = document.getElementById("restaurantName").value.trim();
        let ownerName = document.getElementById("ownerName").value.trim();
        let email = document.getElementById("email").value.trim();
        let phone = document.getElementById("phone").value.trim();
        let password = document.getElementById("password").value.trim();
        let confirmPassword = document.getElementById("confirmPassword").value.trim();
        let open = document.getElementById("open").value.trim();
        let close = document.getElementById("close").value.trim();

        // Validation
        if (!restaurantName) {
          document.getElementById("restaurantNameError").innerText = "Restaurant name is required";
          isValid = false;
        }
        if (!ownerName) {
          document.getElementById("ownerNameError").innerText = "Owner name is required";
          isValid = false;
        }
        if (!email) {
          document.getElementById("emailError").innerText = "Email is required";
          isValid = false;
        } else if (!/\S+@\S+\.\S+/.test(email)) {
          document.getElementById("emailError").innerText = "Invalid email format";
          isValid = false;
        }
        if (!phone) {
          document.getElementById("phoneError").innerText = "Phone number is required";
          isValid = false;
        } else if (!/^\d{10}$/.test(phone)) {
          document.getElementById("phoneError").innerText = "Invalid phone number";
          isValid = false;
        }
        if (password.length < 6) {
          document.getElementById("passwordError").innerText = "Password must be at least 6 characters";
          isValid = false;
        }
        if (confirmPassword !== password) {
          document.getElementById("confirmPasswordError").innerText = "Passwords do not match";
          isValid = false;
        }

        if (isValid) {
          document.getElementById("registerForm").submit();
        }
        
      }
      function previewImage(input, previewId) {
    const previewContainer = document.getElementById(previewId);
    const previewWrapper = previewContainer.querySelector('.image-preview-wrapper');
    
    // Clear previous content
    previewWrapper.innerHTML = '';
    
    if (input.files && input.files[0]) {
      const reader = new FileReader();
      
      reader.onload = function(e) {
        // Create image element
        const img = document.createElement('img');
        img.src = e.target.result;
        
        // Create remove button
        const removeBtn = document.createElement('div');
        removeBtn.className = 'remove-image';
        removeBtn.innerHTML = '<i class="fas fa-times"></i>';
        removeBtn.onclick = function(event) {
          event.stopPropagation();
          previewWrapper.innerHTML = '<div class="placeholder-text">No image selected</div>';
          input.value = '';
        };
        
        // Add elements to container
        previewWrapper.appendChild(img);
        previewContainer.appendChild(removeBtn);
      }
      
      reader.readAsDataURL(input.files[0]);
    } else {
      // Show placeholder text when no image
      previewWrapper.innerHTML = '<div class="placeholder-text">No image selected</div>';
    }
  }
  
  // Initialize placeholders on page load
  document.addEventListener('DOMContentLoaded', function() {
    const previewContainers = document.querySelectorAll('.image-preview-container');
    previewContainers.forEach(container => {
      const wrapper = container.querySelector('.image-preview-wrapper');
      wrapper.innerHTML = '<div class="placeholder-text">No image selected</div>';
    });
  });
  function previewImage(input, previewId) {
  const previewContainer = document.getElementById(previewId);
  const previewWrapper = previewContainer.querySelector('.image-preview-wrapper');
  
  // Clear previous content
  previewWrapper.innerHTML = '';
  
  // Remove any existing remove button
  const existingRemoveBtn = previewContainer.querySelector('.remove-image');
  if (existingRemoveBtn) {
    existingRemoveBtn.remove();
  }
  
  if (input.files && input.files[0]) {
    const reader = new FileReader();
    
    reader.onload = function(e) {
      // Create image element
      const img = document.createElement('img');
      img.src = e.target.result;
      
      // Create remove button (just a div, no icon needed)
      const removeBtn = document.createElement('div');
      removeBtn.className = 'remove-image';
      
      removeBtn.onclick = function(event) {
        event.stopPropagation();
        previewWrapper.innerHTML = '<div class="placeholder-text">No image selected</div>';
        input.value = '';
        removeBtn.remove();
      };
      
      // Add elements to container
      previewWrapper.appendChild(img);
      previewContainer.appendChild(removeBtn);
    }
    
    reader.readAsDataURL(input.files[0]);
  } else {
    // Show placeholder text when no image
    previewWrapper.innerHTML = '<div class="placeholder-text">No image selected</div>';
  }
}
// async function getLocation() {
//     if (navigator.geolocation) {
//       navigator.geolocation.getCurrentPosition(async (position) => {
//         const latitude = position.coords.latitude;
//         const longitude = position.coords.longitude;

//         // Update the UI with latitude and longitude
//         document.getElementById("latitudeValue").textContent = latitude;
//         document.getElementById("longitudeValue").textContent = longitude;

//         // Set the values in hidden inputs to submit with the form
//         document.getElementById("latitude").value = latitude;
//         document.getElementById("longitude").value = longitude;

//         // Fetch the actual address (Reverse Geocoding) using Nominatim API
//         try {
//           const response = await fetch(
//             `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`
//           );
//           const data = await response.json();
//           const address = data.display_name || "Address not found";

//           // Update the UI with the fetched address
//           document.getElementById("addressValue").textContent = address;
//           document.getElementById("address").value = address;

//           alert("Location fetched successfully!");
//         } catch (error) {
//           console.error("Error fetching address:", error);
//           alert("Failed to fetch address.");
//         }
//       }, (error) => {
//         alert("Error getting location: " + error.message);
//       });
//     } else {
//       alert("Geolocation is not supported by this browser.");
//     }
//   }

async function getLocation() {
    if (!navigator.geolocation) {
      alert("Geolocation is not supported by this browser.");
      return;
    }

    navigator.geolocation.getCurrentPosition(
      async (position) => {
        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;

        // Update the UI with latitude and longitude
        document.getElementById("latitudeValue").textContent = latitude;
        document.getElementById("longitudeValue").textContent = longitude;

        // Set the values in hidden inputs for form submission
        document.getElementById("latitude").value = latitude;
        document.getElementById("longitude").value = longitude;

        // Fetch the actual address (Reverse Geocoding) using Nominatim API
        try {
          const response = await fetch(
            `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`
          );

          if (!response.ok) {
            throw new Error("Failed to fetch address.");
          }

          const data = await response.json();
          const address = data.display_name || "Address not found";

          // Update the UI with the fetched address
          document.getElementById("addressValue").textContent = address;
          document.getElementById("address").value = address;

          // alert("Location fetched successfully!");
        } catch (error) {
          console.error("Error fetching address:", error);
          alert("Failed to fetch address.");
        }
      },
      (error) => {
        switch (error.code) {
          case error.PERMISSION_DENIED:
            alert("User denied the request for Geolocation.");
            break;
          case error.POSITION_UNAVAILABLE:
            alert("Location information is unavailable.");
            break;
          case error.TIMEOUT:
            alert("The request to get user location timed out.");
            break;
          default:
            alert("An unknown error occurred.");
            break;
        }
      }
    );
  }
    </script>
  </body>
</html>
