<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Register Restaurant</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

    <style>
      body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 40px 0;
      }

      .container {
        max-width: 800px;
        padding: 40px;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        background-color: white;
        margin: 20px auto;
      }

      h2 {
        color: #2d3748;
        font-size: 28px;
        font-weight: 700;
        text-align: center;
        margin-bottom: 2px;
      }

      h3 {
        color: #2d3748;
        font-size: 20px;
        font-weight: 600;
        margin: 20px 0;
      }

      .divider {
        width: 100%;
        height: 1px;
        background: linear-gradient(to right, #667eea, #764ba2);
        margin: 25px 0;
        opacity: 0.2;
      }

      .form-group {
        margin-bottom: 20px;
      }

      label {
        font-weight: 600;
        color: #4a5568;
        margin-bottom: 8px;
        display: block;
      }

      input {
        height: 50px;
        padding: 10px 20px;
        border: 1px solid #e2e8f0;
        border-radius: 10px;
        transition: all 0.3s ease;
        width: 100%;
        font-size: 14px;
      }

      input:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        outline: none;
      }

      .error {
        color: #e53e3e;
        font-size: 13px;
        margin-top: 6px;
        font-weight: 500;
      }

      .button {
        width: 100%;
        height: 50px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 10px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 2px;
      }

      .button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
      }

      /* Image Gallery Section Styles */
      .form-section {
        margin: 30px 0;
      }

      .section-header {
        margin-bottom: 25px;
        text-align: left;
      }

      .section-header h3 {
        font-size: 1.5rem;
        color: #333;
        margin-bottom: 8px;
        font-weight: 600;
      }

      .section-description {
        color: #6c757d;
        font-size: 0.9rem;
      }

      .image-gallery-section {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding-top: 2px;
        padding-left: 25px;
        margin-top: 10px;
        border: 1px solid #e2e8f0;
      }

      .image-upload-container {
        margin-top: 10px;
      }

      .upload-box {
        background-color: #f9f9f9;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        border: 1px solid #e0e0e0;
      }

      .upload-box:hover {
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        border-color: #4299e1;
      }

      .input-label {
        display: block;
        margin-bottom: 10px;
        font-weight: 500;
        color: #2d3748;
      }

      .input-label i {
        color: #4299e1;
      }

      .preview-container {
        height: 150px;
        background-color: #f7fafc;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-top: 10px;
        overflow: hidden;
        border: 1px solid #edf2f7;
      }

      .preview-placeholder {
        text-align: center;
        color: #a0aec0;
      }

      .preview-placeholder i {
        font-size: 30px;
        margin-bottom: 8px;
      }

      #preview6 {
        height: 100px;
        background-color: #f7fafc;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-top: 10px;
        overflow: hidden;
        border: 1px solid #edf2f7;
      }

      .image-preview-container {
        width: 100%;
        height: 100px;
        border: 1px dashed #ccc;
        border-radius: 4px;
        overflow: hidden;
        position: relative;
        background-color: #f5f5f5;
      }

      .image-preview-wrapper {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
      }

      .image-preview-wrapper img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
      }

      .remove-image {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 50%;
        width: 28px;
        height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 10;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        transition: all 0.2s ease;
        border: 1px solid rgba(206, 26, 26, 0.3);
      }

      .remove-image:hover {
        background: rgba(255, 255, 255, 1);
        transform: scale(1.1);
        box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);
      }

      .remove-image:active {
        transform: scale(0.95);
      }

      /* Cross symbol using ::before and ::after */
      .remove-image::before,
      .remove-image::after {
        content: "";
        position: absolute;
        width: 14px;
        height: 2px;
        background-color: #070000;
        border-radius: 1px;
        transition: all 0.2s ease;
      }

      .remove-image::before {
        transform: rotate(45deg);
      }

      .remove-image::after {
        transform: rotate(-45deg);
      }

      .remove-image:hover::before,
      .remove-image:hover::after {
        background-color: #ff0000;
        width: 16px;
      }

      .placeholder-text {
        color: #aaa;
        font-size: 14px;
      }

      /* Location Styles */
      .location-container {
        margin: 20px auto;
        padding: 15px;
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        background: #fff;
        font-family: Arial, sans-serif;
      }

      .map-and-coordinates {
        display: flex;
        flex-direction: row;
        gap: 20px;
        margin-bottom: 15px;
      }

      .map-box {
        flex: 2;
        text-align: center;
        margin-bottom: 0;
      }

      #map {
        width: 100%;
        height: 400px;
        border: 1px solid #ccc;
        border-radius: 8px;
        margin-top: 10px;
      }

      .get-location-btn {
        margin-top: 15px;
        padding: 10px 20px;
        background: #6a5acd;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        width: 100%;
      }

      .get-location-btn:hover {
        background: #483d8b;
      }

      /* Styled Coordinates Box */
      .coordinates-box {
        flex: 1;
        background-color: #f8f9fa;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        text-align: left;
        font-family: Arial, sans-serif;
        min-width: 250px;
        height: auto;
        display: flex;
        flex-direction: column;
        justify-content: center;
      }

      .coordinates-box h3 {
        color: #333;
        font-size: 20px;
        font-weight: 600;
        margin-top: 0;
        margin-bottom: 20px;
        text-align: left;
      }

      .coordinates-box p {
        margin: 12px 0;
        color: #333;
        font-size: 16px;
      }

      .coordinates-box strong {
        color: #000;
        font-weight: 600;
        margin-right: 8px;
      }

      .coordinates-box span {
        color: #333;
        font-weight: normal;
      }

      .coordinates-box p:last-child {
        margin-bottom: 0;
      }

      #address-display {
        color: #333;
        display: block;
        margin-top: 5px;
        line-height: 1.5;
      }

      .coordinates-box p:last-child strong {
        display: block;
        margin-bottom: 5px;
      }

      .highlight-animation {
        animation: highlight 1s ease;
      }

      @keyframes highlight {
        0% {
          background-color: #f8f9fa;
        }
        50% {
          background-color: rgba(52, 152, 219, 0.2);
        }
        100% {
          background-color: #f8f9fa;
        }
      }

      /* Responsive styles */
      @media (min-width: 768px) {
        .form-row {
          display: flex;
          gap: 20px;
        }

        .form-row .form-group {
          flex: 1;
        }
      }

      @media (max-width: 768px) {
        .container {
          padding: 20px;
          margin: 10px;
        }

        h2 {
          font-size: 24px;
        }

        input {
          height: 45px;
        }

        .col-md-6 {
          width: 100%;
        }

        .map-and-coordinates {
          flex-direction: column;
        }

        .coordinates-box {
          margin-top: 15px;
        }
      }

      .radio-container {
        display: flex;
        gap: 20px;
        margin-bottom: 10px;
      }

      .radio-option {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .radio-option input[type="radio"] {
        appearance: none;
        -webkit-appearance: none;
        width: 20px;
        height: 20px;
        border: 2px solid #ccc;
        border-radius: 50%;
        outline: none;
        cursor: pointer;
        position: relative;
      }

      /* Vegetarian option styling */
      .veg-option input[type="radio"]:checked {
        border-color: #48bb78;
      }

      .veg-option input[type="radio"]:checked::before {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background-color: #48bb78;
      }

      /* Non-vegetarian option styling */
      .nonveg-option input[type="radio"]:checked {
        border-color: #e53e3e;
      }

      .nonveg-option input[type="radio"]:checked::before {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background-color: #e53e3e;
      }

      .radio-label {
        font-weight: normal;
        margin-bottom: 0;
        cursor: pointer;
      }

      /* Color indicators next to text */
      .veg-option .radio-label::after {
        content: "";
        display: inline-block;
        width: 10px;
        height: 10px;
        background-color: #48bb78;
        border-radius: 50%;
        margin-left: 6px;
      }

      .nonveg-option .radio-label::after {
        content: "";
        display: inline-block;
        width: 10px;
        height: 10px;
        background-color: #e53e3e;
        border-radius: 50%;
        margin-left: 6px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h2>Register Your Restaurant</h2>
      <div class="divider"></div>

      <form
        id="registerForm"
        action="/Register_page"
        method="POST"
        enctype="multipart/form-data"
      >
        <div class="form-row">
          <div class="form-group">
            <label>Restaurant Name</label>
            <input
              type="text"
              id="restaurantName"
              name="restaurantName"
              placeholder="Enter restaurant name"
            />
            <div class="error" id="restaurantNameError"></div>
          </div>

          <div class="form-group">
            <label>Owner Full Name</label>
            <input
              type="text"
              id="ownerName"
              name="ownerName"
              placeholder="Enter owner name"
            />
            <div class="error" id="ownerNameError"></div>
          </div>
        </div>

        <div class="form-row">
          <div class="form-group">
            <label>Email</label>
            <input
              type="email"
              id="email"
              name="email"
              placeholder="Enter email"
            />
            <div class="error" id="emailError"></div>
          </div>

          <div class="form-group">
            <label>Phone Number</label>
            <input
              type="text"
              id="phone"
              name="phone"
              placeholder="Enter phone number"
            />
            <div class="error" id="phoneError"></div>
          </div>
        </div>

        <div class="form-row">
          <div class="form-group">
            <label>Password</label>
            <input
              type="password"
              id="password"
              name="password"
              placeholder="Enter password"
            />
            <div class="error" id="passwordError"></div>
          </div>

          <div class="form-group">
            <label>Confirm Password</label>
            <input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              placeholder="Confirm password"
            />
            <div class="error" id="confirmPasswordError"></div>
          </div>
        </div>
        <div class="form-row">
          <div class="form-group">
            <label>Openning Time</label>
            <input
              type="open"
              id="open"
              name="open"
              placeholder="Enter Openning"
            />
            <div class="error" id="openError"></div>
          </div>

          <div class="form-group">
            <label>Closing Time</label>
            <input
              type="close"
              id="close"
              name="close"
              placeholder="Enter Closing"
            />
            <div class="error" id="closeError"></div>
          </div>
        </div>

        <div class="form-row">
          <div class="form-group" style="width: 100%">
            <label>Restaurant Cuisine</label>
            <input
              type="text"
              id="cuisine"
              name="cuisine"
              placeholder="Enter cuisines (e.g., Indian, Chinese, Italian)"
            />
            <div class="error" id="cuisineError"></div>
          </div>
        </div>
        <div class="form-row">
          <div class="form-group" style="width: 100%">
            <label>Restaurant Type</label>
            <div class="radio-container">
              <div class="radio-option veg-option">
                <input
                  type="radio"
                  id="vegType"
                  name="restaurantType"
                  value="Veg"
                  checked
                />
                <label for="vegType" class="radio-label">Pure Vegetarian</label>
              </div>
              <div class="radio-option nonveg-option">
                <input
                  type="radio"
                  id="nonVegType"
                  name="restaurantType"
                  value="NonVeg"
                />
                <label for="nonVegType" class="radio-label"
                  >Non-Vegetarian</label
                >
              </div>
            </div>
            <div class="error" id="restaurantTypeError"></div>
          </div>
        </div>
        <div class="divider"></div>

        <h3>Restaurant Location</h3>
        <div class="location-container">
          <h2>Select Location</h2>
          <div class="map-and-coordinates">
            <div class="map-box">
              <div id="map" style="height: 400px"></div>
              <button
                type="button"
                class="get-location-btn"
                id="getLocationBtn"
                onclick="getLocation()"
              >
                <i class="fas fa-location-arrow"></i> Get Current Location
              </button>
            </div>

            <div class="coordinates-box">
              <h3>Selected Coordinates:</h3>
              <p>
                <strong>Latitude:</strong> <span id="lat-display">Not set</span>
              </p>
              <p>
                <strong>Longitude:</strong>
                <span id="lng-display">Not set</span>
              </p>
              <p>
                <strong>Address:</strong>
                <span id="address-display">Not set</span>
              </p>
            </div>
          </div>

          <input type="hidden" id="latitude" name="latitude" />
          <input type="hidden" id="longitude" name="longitude" />
        </div>
        <!-- <div class="form-row">
          <div class="form-group">
            <label>Shop / Building No.</label>
            <input
              type="text"
              id="shopNo"
              name="shopNo"
              placeholder="Enter shop/building number"
            />
          </div>

          <div class="form-group">
            <label>Floor / Tower No.</label>
            <input
              type="text"
              id="floorNo"
              name="floorNo"
              placeholder="Enter floor/tower number"
            />
          </div>
        </div> -->

        <!-- <div class="form-row">
          <div class="form-group">
            <label>Area</label>
            <input type="text" id="area" name="area" placeholder="Enter area" />
          </div>

          <div class="form-group">
            <label>City</label>
            <input type="text" id="city" name="city" placeholder="Enter city" />
          </div>
        </div> -->
        <!-- <div class="form-group">
          <label>Shop / Building No.</label>
          <input type="text" id="shopNo" name="shopNo" placeholder="Enter shop/building number" />
          <span id="shopNoError" class="error-message"></span>
        </div>
        
        <div class="form-group">
          <label>Floor / Tower No.</label>
          <input type="text" id="floorNo" name="floorNo" placeholder="Enter floor/tower number" />
          
        </div>
        
        <div class="form-group">
          <label>Area</label>
          <input type="text" id="area" name="area" placeholder="Enter area" />
          <span id="areaError" class="error-message"></span>
        </div>
        
        <div class="form-group">
          <label>City</label>
          <input type="text" id="city" name="city" placeholder="Enter city" />
          <span id="cityError" class="error-message"></span>
        </div>
         -->
        <div class="form-row">
         <div class="form-group">
          <label>Shop / Building No.</label>
          <input type="text" id="shopNo" name="shopNo" placeholder="Enter shop/building number" />
          <div class="error" id="shopNoError"></div>
        </div>
        
        <div class="form-group">
          <label>Floor / Tower No.</label>
          <input type="text" id="floorNo" name="floorNo" placeholder="Enter floor/tower number" />
          <div class="error" id="floorNoError"></div>
        </div>
      </div>
      <div class="form-row">  
        <div class="form-group">
          <label>Area</label>
          <input type="text" id="area" name="area" placeholder="Enter area" />
          <div class="error" id="areaError"></div>
        </div>
        
        <div class="form-group">
          <label>City</label>
          <input type="text" id="city" name="city" placeholder="Enter city" />
          <div class="error" id="cityError"></div>
        </div>
      </div>
        
         <!-- Restaurant Images Section -->
        <div class="form-section image-gallery-section">
          <div class="section-header">
            <h3>Restaurant Images</h3>
            <p class="section-description">
              Upload photos to showcase your restaurant
            </p>
          </div>

          <div class="row image-upload-container">
            <!-- Front View -->
            <div class="col-md-6 mb-4">
              <div class="upload-box">
                <label class="input-label"> Front View </label>
                <input
                  type="file"
                  class="form-control"
                  name="galleryImages"
                  accept="image/*"
                  onchange="previewImage(this, 'preview-front')"
                />
                <div id="preview-front" class="image-preview-container">
                  <div class="image-preview-wrapper">
                    <!-- Image will be inserted here -->
                  </div>
                </div>
              </div>
            </div>
            <!-- Interior View -->
            <div class="col-md-6 mb-4">
              <div class="upload-box">
                <label class="input-label"> Interior View </label>
                <input
                  type="file"
                  class="form-control"
                  name="galleryImages"
                  accept="image/*"
                  onchange="previewImage(this, 'preview-interior')"
                />
                <div id="preview-interior" class="image-preview-container">
                  <div class="image-preview-wrapper">
                    <!-- Image will be inserted here -->
                  </div>
                </div>
              </div>
            </div>

            <!-- Dining Area -->
            <div class="col-md-6 mb-4">
              <div class="upload-box">
                <label class="input-label"> Dining Area </label>
                <input
                  type="file"
                  class="form-control"
                  name="galleryImages"
                  accept="image/*"
                  onchange="previewImage(this, 'preview-dining')"
                />
                <div id="preview-dining" class="image-preview-container">
                  <div class="image-preview-wrapper">
                    <!-- Image will be inserted here -->
                  </div>
                </div>
              </div>
            </div>

            <!-- Kitchen View -->
            <div class="col-md-6 mb-4">
              <div class="upload-box">
                <label class="input-label"> Special Feature 1 </label>
                <input
                  type="file"
                  class="form-control"
                  name="galleryImages"
                  accept="image/*"
                  onchange="previewImage(this, 'preview-kitchen')"
                />
                <div id="preview-kitchen" class="image-preview-container">
                  <div class="image-preview-wrapper">
                    <!-- Image will be inserted here -->
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <button type="submit" class="button" onclick="validateForm(event)">
          Register Restaurant
        </button>
      </form>
    </div>

    <script>
      //   function validateForm(event) {
      //   event.preventDefault();
      //   let isValid = true;

      //   // Clear previous error messages
      //   const errorIds = ["restaurantNameError", "ownerNameError", "emailError", "phoneError", "passwordError", "confirmPasswordError", "timeError"];
      //   errorIds.forEach(id => document.getElementById(id).innerText = "");

      //   // Get input values
      //   let restaurantName = document.getElementById("restaurantName").value.trim();
      //   let ownerName = document.getElementById("ownerName").value.trim();
      //   let email = document.getElementById("email").value.trim();
      //   let phone = document.getElementById("phone").value.trim();
      //   let password = document.getElementById("password").value.trim();
      //   let confirmPassword = document.getElementById("confirmPassword").value.trim();
      //   let open = document.getElementById("open").value.trim();
      //   let close = document.getElementById("close").value.trim();
      //   let cuisine=document.getElementById("cuisine").value.trim();

      //   // Validation
      //   if (!restaurantName) {
      //     document.getElementById("restaurantNameError").innerText = "Restaurant name is required";
      //     isValid = false;
      //   }
      //   if (!ownerName) {
      //     document.getElementById("ownerNameError").innerText = "Owner name is required";
      //     isValid = false;
      //   }
      //   if (!email) {
      //     document.getElementById("emailError").innerText = "Email is required";
      //     isValid = false;
      //   } else if (!/\S+@\S+\.\S+/.test(email)) {
      //     document.getElementById("emailError").innerText = "Invalid email format";
      //     isValid = false;
      //   }
      //   if (!phone) {
      //     document.getElementById("phoneError").innerText = "Phone number is required";
      //     isValid = false;
      //   } else if (!/^\d{10}$/.test(phone)) {
      //     document.getElementById("phoneError").innerText = "Invalid phone number";
      //     isValid = false;
      //   }
      //   if (password.length < 6) {
      //     document.getElementById("passwordError").innerText = "Password must be at least 6 characters";
      //     isValid = false;
      //   }
      //   if (confirmPassword !== password) {
      //     document.getElementById("confirmPasswordError").innerText = "Passwords do not match";
      //     isValid = false;
      //   }
      // if(!shopNo)
      //   if (isValid) {
      //     document.getElementById("registerForm").submit();
      //   }
      // }

      // function previewImage(input, previewId) {
      //   const previewContainer = document.getElementById(previewId);
      //   const previewWrapper = previewContainer.querySelector('.image-preview-wrapper');
      //   previewWrapper.innerHTML = '';

      //   const existingRemoveBtn = previewContainer.querySelector('.remove-image');
      //   if (existingRemoveBtn) existingRemoveBtn.remove();

      //   if (input.files && input.files[0]) {
      //     const reader = new FileReader();
      //     reader.onload = function (e) {
      //       const img = document.createElement('img');
      //       img.src = e.target.result;

      //       const removeBtn = document.createElement('div');
      //       removeBtn.className = 'remove-image';
      //       removeBtn.onclick = function (event) {
      //         event.stopPropagation();
      //         previewWrapper.innerHTML = '<div class="placeholder-text">No image selected</div>';
      //         input.value = '';
      //         removeBtn.remove();
      //       };

      //       previewWrapper.appendChild(img);
      //       previewContainer.appendChild(removeBtn);
      //     };
      //     reader.readAsDataURL(input.files[0]);
      //   } else {
      //     previewWrapper.innerHTML = '<div class="placeholder-text">No image selected</div>';
      //   }
      // }

      // // Initialize placeholders on page load
      // document.addEventListener('DOMContentLoaded', function () {
      //   const previewContainers = document.querySelectorAll('.image-preview-container');
      //   previewContainers.forEach(container => {
      //     const wrapper = container.querySelector('.image-preview-wrapper');
      //     wrapper.innerHTML = '<div class="placeholder-text">No image selected</div>';
      //   });
      // });

      // const map = L.map('map').setView([20.5937, 78.9629], 5);
      //   L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      //     attribution: '&copy; OpenStreetMap contributors'
      //   }).addTo(map);
      //   let marker;

      //   function getLocation() {
      //     if (navigator.geolocation) {
      //       navigator.geolocation.getCurrentPosition(async (position) => {
      //         const lat = position.coords.latitude;
      //         const lng = position.coords.longitude;
      //         document.getElementById('lat-display').textContent = lat;
      //         document.getElementById('lng-display').textContent = lng;
      //         document.getElementById('latitude').value = lat;
      //         document.getElementById('longitude').value = lng;

      //         if (marker) map.removeLayer(marker);
      //         marker = L.marker([lat, lng]).addTo(map);
      //         map.setView([lat, lng], 15);

      //         // Reverse Geocoding to get Address
      //         const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`);
      //         const data = await response.json();
      //         const address = data.display_name || "Address not found";
      //         document.getElementById('address-display').textContent = address;
      //       }, () => alert("Unable to retrieve your location"));
      //     } else {
      //       alert("Geolocation is not supported by this browser.");
      //     }
      //   }

      // Initialize map using Leaflet
      function validateForm(event) {
        event.preventDefault();
        let isValid = true;

        // Clear previous error messages
        const errorIds = [
          "restaurantNameError",
          "ownerNameError",
          "emailError",
          "phoneError",
          "passwordError",
          "confirmPasswordError",
          "timeError",
          "shopNoError",
          "floorNoError",
          "areaError",
          "cityError",
          "openError",
          "closeError",
          "cuisineError"
        ];
        errorIds.forEach((id) => {
          const errorElement = document.getElementById(id);
          if (errorElement) errorElement.innerText = "";
        });

        // Get input values
        let restaurantName = document
          .getElementById("restaurantName")
          .value.trim();
        let ownerName = document.getElementById("ownerName").value.trim();
        let email = document.getElementById("email").value.trim();
        let phone = document.getElementById("phone").value.trim();
        let password = document.getElementById("password").value.trim();
        let confirmPassword = document
          .getElementById("confirmPassword")
          .value.trim();
        let shopNo = document.getElementById("shopNo").value.trim();
        let floorNo = document.getElementById("floorNo").value.trim();
        let area = document.getElementById("area").value.trim();
        let city = document.getElementById("city").value.trim();
        let open = document.getElementById("open").value.trim();
        let close = document.getElementById("close").value.trim();
        let cuisine = document.getElementById("cuisine").value.trim();
        // Validation
        if (!restaurantName) {
          document.getElementById("restaurantNameError").innerText =
            "Restaurant name is required";
          isValid = false;
        }
        if (!ownerName) {
          document.getElementById("ownerNameError").innerText =
            "Owner name is required";
          isValid = false;
        }
        if (!email) {
          document.getElementById("emailError").innerText = "Email is required";
          isValid = false;
        } else if (!/\S+@\S+\.\S+/.test(email)) {
          document.getElementById("emailError").innerText =
            "Invalid email format";
          isValid = false;
        }
        if (!phone) {
          document.getElementById("phoneError").innerText =
            "Phone number is required";
          isValid = false;
        } else if (!/^\d{10}$/.test(phone)) {
          document.getElementById("phoneError").innerText =
            "Invalid phone number";
          isValid = false;
        }
        if (password.length < 6) {
          document.getElementById("passwordError").innerText =
            "Password must be at least 6 characters";
          isValid = false;
        }
        if (confirmPassword !== password) {
          document.getElementById("confirmPasswordError").innerText =
            "Passwords do not match";
          isValid = false;
        }

        // Location Fields Validation
        if (!shopNo) {
          document.getElementById("shopNoError").innerText =
            "Shop / Building No. is required";
          isValid = false;
        }
        if (!floorNo) {
          document.getElementById("floorNoError").innerText =
            "Floor / Tower No. is required";
          isValid = false;
        }
        if (!area) {
          document.getElementById("areaError").innerText = "Area is required";
          isValid = false;
        }
        if (!city) {
          document.getElementById("cityError").innerText = "City is required";
          isValid = false;
        }
        if (!open) {
          document.getElementById("openError").innerText = "Openning time is required";
          isValid = false;
        }
        if (!close) {
          document.getElementById("closeError").innerText = "Clossing is required";
          isValid = false;
        }
        if (!cuisine) {
          document.getElementById("cuisineError").innerText = "Cuisine is required";
          isValid = false;
        }

        if (isValid) {
          document.getElementById("registerForm").submit();
        }
      }

      function previewImage(input, previewId) {
        const maxSizeInBytes = 750 * 1024; // 750KB in bytes
        const previewContainer = document.getElementById(previewId);
        const previewWrapper = previewContainer.querySelector(
          ".image-preview-wrapper"
        );
        previewWrapper.innerHTML = "";

        // Find the corresponding label
        const uploadBox = input.closest(".upload-box");
        const label = uploadBox.querySelector(".input-label");

        // Remove any existing size warning
        const existingSizeWarning = label.querySelector(".size-warning");
        if (existingSizeWarning) {
          existingSizeWarning.remove();
        }

        const existingRemoveBtn =
          previewContainer.querySelector(".remove-image");
        if (existingRemoveBtn) existingRemoveBtn.remove();

        if (input.files && input.files[0]) {
          // Check file size
          if (input.files[0].size > maxSizeInBytes) {
            // File is too large - clear the input
            input.value = "";

            // Add warning message next to the label
            const sizeWarning = document.createElement("span");
            sizeWarning.className = "size-warning text-danger ml-2";
            sizeWarning.style.marginLeft = "10px";
            sizeWarning.style.fontSize = "0.85rem";
            sizeWarning.innerText = "(Max 750KB)";
            label.appendChild(sizeWarning);

            // Show placeholder since we rejected the file
            previewWrapper.innerHTML =
              '<div class="placeholder-text">No image selected</div>';
            return;
          }

          const reader = new FileReader();
          reader.onload = function (e) {
            const img = document.createElement("img");
            img.src = e.target.result;

            const removeBtn = document.createElement("div");
            removeBtn.className = "remove-image";
            removeBtn.onclick = function (event) {
              event.stopPropagation();
              previewWrapper.innerHTML =
                '<div class="placeholder-text">No image selected</div>';
              input.value = "";
              removeBtn.remove();

              // Also remove any size warnings when image is removed
              const sizeWarning = label.querySelector(".size-warning");
              if (sizeWarning) {
                sizeWarning.remove();
              }
            };

            previewWrapper.appendChild(img);
            previewContainer.appendChild(removeBtn);
          };
          reader.readAsDataURL(input.files[0]);
        } else {
          previewWrapper.innerHTML =
            '<div class="placeholder-text">No image selected</div>';
        }
      }

      // Initialize placeholders on page load
      document.addEventListener("DOMContentLoaded", function () {
        const previewContainers = document.querySelectorAll(
          ".image-preview-container"
        );
        previewContainers.forEach((container) => {
          const wrapper = container.querySelector(".image-preview-wrapper");
          wrapper.innerHTML =
            '<div class="placeholder-text">No image selected</div>';
        });

        // Add form validation if you want to check before submission
        const form = document.querySelector("form");
        if (form) {
          form.addEventListener("submit", function (event) {
            const maxSizeInBytes = 750 * 1024; // 750KB in bytes
            const fileInputs = document.querySelectorAll(
              'input[type="file"][name="galleryImages"]'
            );
            let isValid = true;

            fileInputs.forEach((input) => {
              if (
                input.files &&
                input.files[0] &&
                input.files[0].size > maxSizeInBytes
              ) {
                isValid = false;

                // Trigger the preview function which will show the error
                previewImage(
                  input,
                  input.getAttribute("onchange").match(/preview-[a-z]+/)[0]
                );
              }
            });

            if (!isValid) {
              event.preventDefault(); // Stop form submission
              alert(
                "Please ensure all images are under 750KB before submitting."
              );
              return false;
            }
          });
        }
      });

      document
        .getElementById("email")
        .addEventListener("input", async (event) => {
          const email = event.target.value.trim();
          const emailError = document.getElementById("emailError");

          if (!/\S+@\S+\.\S+/.test(email)) {
            emailError.innerText = "Invalid email format";
            return;
          }

          try {
            const response = await fetch(
              `/check-email?email=${encodeURIComponent(email)}`
            );
            const data = await response.json();

            if (data.exists) {
              emailError.innerText = "Email is already in use";
            } else {
              emailError.innerText = "";
            }
          } catch (error) {
            console.error("Error checking email:", error);
            emailError.innerText = "Error checking email";
          }
        });

      const map = L.map("map").setView([20.5937, 78.9629], 5);
      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: "&copy; OpenStreetMap contributors",
      }).addTo(map);

      let marker;

      // Handle map click to set location
      map.on("click", function (e) {
        const lat = e.latlng.lat;
        const lng = e.latlng.lng;
        setLocationMarker(lat, lng);
        getAddressFromCoordinates(lat, lng);
      });

      // Function to handle getting current location
      async function getLocation() {
        const btn = document.getElementById("getLocationBtn");

        // Add loading indicator
        btn.innerHTML =
          '<i class="fas fa-spinner fa-spin"></i> Getting Location...';
        btn.disabled = true;

        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            async (position) => {
              const lat = position.coords.latitude;
              const lng = position.coords.longitude;

              setLocationMarker(lat, lng);
              await getAddressFromCoordinates(lat, lng);

              // Reset button
              btn.innerHTML =
                '<i class="fas fa-location-arrow"></i> Get Current Location';
              btn.disabled = false;
            },
            (error) => {
              alert("Unable to retrieve your location: " + error.message);
              btn.innerHTML =
                '<i class="fas fa-location-arrow"></i> Get Current Location';
              btn.disabled = false;
            }
          );
        } else {
          alert("Geolocation is not supported by this browser.");
          btn.innerHTML =
            '<i class="fas fa-location-arrow"></i> Get Current Location';
          btn.disabled = false;
        }
      }

      // Function to set marker and update coordinates display
      function setLocationMarker(lat, lng) {
        document.getElementById("lat-display").textContent = lat.toFixed(6);
        document.getElementById("lng-display").textContent = lng.toFixed(6);
        document.getElementById("latitude").value = lat;
        document.getElementById("longitude").value = lng;

        if (marker) map.removeLayer(marker);

        // Create custom icon with pulsing effect
        const customIcon = L.divIcon({
          className: "custom-map-marker",
          html: '<div class="marker-pin"></div>',
          iconSize: [30, 30],
          iconAnchor: [15, 30],
        });

        marker = L.marker([lat, lng], {
          icon: customIcon,
          draggable: true,
        }).addTo(map);

        // Handle marker drag
        marker.on("dragend", function (event) {
          const position = marker.getLatLng();
          setLocationMarker(position.lat, position.lng);
          getAddressFromCoordinates(position.lat, position.lng);
        });

        map.setView([lat, lng], 15);

        // Add visual feedback
        highlightCoordinatesBox();
      }

      // Function to get address from coordinates using Nominatim
      async function getAddressFromCoordinates(lat, lng) {
        document.getElementById("address-display").textContent =
          "Finding address...";

        try {
          const response = await fetch(
            `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&addressdetails=1`
          );
          const data = await response.json();

          if (data && data.display_name) {
            document.getElementById("address-display").textContent =
              data.display_name;

            // Auto-fill area and city if possible
            if (data.address) {
              // Try to fill area field
              if (document.getElementById("area")) {
                const area =
                  data.address.suburb ||
                  data.address.neighbourhood ||
                  data.address.district ||
                  data.address.county ||
                  "";
                document.getElementById("area").value = area;
              }

              // Try to fill city field
              if (document.getElementById("city")) {
                const city =
                  data.address.city ||
                  data.address.town ||
                  data.address.village ||
                  "";
                document.getElementById("city").value = city;
              }
            }
          } else {
            document.getElementById("address-display").textContent =
              "Address not found";
          }
        } catch (error) {
          console.error("Error fetching address:", error);
          document.getElementById("address-display").textContent =
            "Unable to get address";
        }
      }

      // Function to highlight coordinates box when updated
      function highlightCoordinatesBox() {
        const coordinatesBox = document.querySelector(".coordinates-box");
        coordinatesBox.classList.add("highlight-animation");
        setTimeout(() => {
          coordinatesBox.classList.remove("highlight-animation");
        }, 1000);
      }

      // Add CSS for the highlighted coordinates and marker
      const style = document.createElement("style");
      style.textContent = `
  .highlight-animation {
    animation: highlight 1s ease;
  }
  
  @keyframes highlight {
    0% { background-color: #f8f9fa; }
    50% { background-color: rgba(52, 152, 219, 0.2); }
    100% { background-color: #f8f9fa; }
  }
  
  .custom-map-marker {
    position: relative;
  }
  
  .marker-pin {
    width: 30px;
    height: 30px;
    border-radius: 50% 50% 50% 0;
    background: #3498db;
    position: absolute;
    transform: rotate(-45deg);
    left: 50%;
    top: 50%;
    margin: -15px 0 0 -15px;
  }
  

`;

      document.head.appendChild(style);
    </script>
  </body>
</html>
