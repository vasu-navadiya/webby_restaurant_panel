const express = require("express");
const path = require("path");
const dotenv = require("dotenv");
const mongoose = require("mongoose");
const RestroData = require("./Server/Register.js"); // Import your MongoDB model
const dbConnection = require("./config/db");
const LoginData = require("./Server/LoginSchema.js");
const menuItem = require("./Server/menuSchema.js");
const crypto = require("crypto");
const BookingsModel = require("./Server/bookings.model.js");

const Booking = require("./Server/Bookingschema.js");
const cookieParser = require("cookie-parser");
const multer = require("multer");
const jwt = require("jsonwebtoken");

dotenv.config();
const app = express();
const port = 3001;
const bcrypt = require("bcryptjs");
const JWT_SECRET = process.env.JWT_SECRET || "polytechnic,themsu";
// Middleware to parse JSON and URL-encoded data
app.use(express.json());
app.use(cookieParser());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, "public")));
app.set("view engine", "ejs"); // Set EJS as the template engine
app.set("views", path.join(__dirname, "Component")); // Tell Express where to find .ejs files
const session = require("express-session");
const MenuItem = require("./Server/menuSchema.js");
const { register } = require("module");
const nodemailer = require("nodemailer");

// Connect to MongoDB
const connectToDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log("Connected to MongoDB");
  } catch (error) {
    console.error("MongoDB Connection Error:", error);
  }
};
connectToDB();
// Configure Multer storage
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "./public/images");
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(
      null,
      file.fieldname + "-" + uniqueSuffix + path.extname(file.originalname)
    );
  },
});
const upload = multer({ storage: storage });

// app.use("/uploads", express.static("uploads"));

// Serve static files (like Register_page.html)
app.use(express.static(path.join(__dirname, "../Component")));

// Home route
// app.get("/", (req, res) => {
//   res.send("Hello World!");
// });
app.get("/", (req, res) => {
  res.render("LandingPage", { title: "Welcome to Our Platform" });
});
// Serve Register_page.html
app.get("/Register_page", (req, res) => {
  res.render("Register_page"); // This should work now
});

app.post("/Register_page", async (req, res) => {
  try {
    const {
      restaurantName,
      ownerName,
      email,
      phone,
      password,
      shopNo,
      floorNo,
      area,
      city,
      open,
      close,
      cuisine,
    } = req.body;

    // Hash password before saving
    const hashedPassword = await bcrypt.hash(password, 10);

    // Save user in MongoDB
    const newUser = await RestroData.create({
      restaurantName,
      ownerName,
      email,
      phone,
      password: hashedPassword, // Save hashed password
      cuisine,
      location: {
        shopNo,
        floorNo,
        area,
        city,
      },
      time:{
        open,
        close,
      }
      
    });
    const token = jwt.sign({ id: newUser._id }, JWT_SECRET, {
      expiresIn: "7d",
    });
    res.cookie("token", token, {
      httpOnly: true,
      secure: true, // Set `true` if using HTTPS
      sameSite: "strict", // Set `none` if using cross-site requests
    });
    // console.log("Data received:", req.body);
    res.redirect("/Final_Admin");
    // res.status(201).json({ message: "Registration successful", user: newUser });
    // res.redirect("/Final_Admin")
  } catch (error) {
    console.error("Registration Error:", error);
    res.status(500).json({ message: "Error registering user" });
  }
});

app.post("/Login_page", async (req, res) => {
  try {
    const { email, password } = req.body;

    // Check if user exists in MongoDB
    const user = await RestroData.findOne({ email });
    if (!user) {
      return res.status(401).json({ message: "User not found" });
    }

    // Compare entered password with hashed password in MongoDB
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: "Invalid credentials" });
    }
    const token = jwt.sign({ userId: user._id }, JWT_SECRET, {
      expiresIn: "7d",
    });

    // Store JWT in HTTP-only cookie
    res.cookie("token", token, {
      httpOnly: true,
      secure: true,
      sameSite: "strict",
    });
    // If password matches, login is successful
    res
      .status(200)
      .json({ message: "Login successful", redirect: "/Dashboard" });
  } catch (error) {
    console.error("Login Error:", error);
    res.status(500).json({ message: "Internal server error" });
  }
});
const verifyToken = (req, res, next) => {
  const token = req.cookies.token;
  if (!token) {
    return res.status(401).json({ message: "Unauthorized, please login" });
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.userId = decoded.userId;
    next();
  } catch (error) {
    return res.status(403).json({ message: "Invalid token" });
  }
};

app.get("/Final_Admin", (req, res) => {
  res.render("Final_Admin");
});
app.get("/Dashboard", verifyToken, async (req, res) => {
  try {
    const totalItems = await menuItem.countDocuments({ restroid: req.userId }); // Get total items count
    const menuItems = await menuItem.find({ restroid: req.userId });
     // Get all menu items
  //  const bookings = [{
  //   "_id": {
  //     "$oid": "67cd3c9b93472ab746709e85"
  //   },
  //   "userId": {
  //     "$oid": "6793643b77ef0ad7446a9cdf"
  //   },
  //   "restaurantId": {
  //     "$oid": "67913c08f53c7d21aad1c39f"
  //   },
  //   "membersCount": 2,
  //   "selectedDate": "9-Mar",
  //   "selectedTimeSlot": "11:30 AM",
  //   "__v": 0
  // },
  // {
  //   "_id": {
  //     "$oid": "67cd40b193472ab746709e87"
  //   },
  //   "userId": {
  //     "$oid": "6793643b77ef0ad7446a9cdf"
  //   },
  //   "restaurantId": {
  //     "$oid": "67913c08f53c7d21aad1c39f"
  //   },
  //   "membersCount": 2,
  //   "selectedDate": "14-3-25",
  //   "selectedTimeSlot": "06:30 PM",
  //   "__v": 0
  // },
  // {
  //   "_id": {
  //     "$oid": "67cd411393472ab746709e8d"
  //   },
  //   "userId": {
  //     "$oid": "6793643b77ef0ad7446a9cdf"
  //   },
  //   "restaurantId": {
  //     "$oid": "67913c08f53c7d21aad1c399"
  //   },
  //   "membersCount": 4,
  //   "selectedDate": "9-3-25",
  //   "selectedTimeSlot": "06:00 PM",
  //   "__v": 0
  // },
  // {
  //   "_id": {
  //     "$oid": "67cd51ec974ffcdd5dc5a042"
  //   },
  //   "userId": {
  //     "$oid": "6793643b77ef0ad7446a9cdf"
  //   },
  //   "restaurantId": {
  //     "$oid": "67913c08f53c7d21aad1c39f"
  //   },
  //   "membersCount": 30,
  //   "selectedDate": "13-3-25",
  //   "selectedTimeSlot": "02:30 PM",
  //   "__v": 0
  // }];
  // const bookings = await BookingsModel.find({})
  // bookings.forEach(async (booking) => {
  //     booking.populate("userId");
  // });
  // const bookings = await BookingsModel.find({}).populate("userId");
  // console.log("Fetched bookings:", bookings);
  // res.render("dashadmin", { totalItems, menuItems , bookings}); // Pass data to EJS
  res.render("dashadmin", { totalItems, menuItems }); // Pass data to EJS
  } catch (error) {
    console.error("Error fetching data:", error);
    res.redirect("/Final_Admin");
  }
});

// app.get("/profile", (req, res) => {
//   res.render("profile");
// });
// app.get("/fooditem", async (req, res) => {
//   try {
//     const menuItems = await FoodItem.find(); // Fetch items from MongoDB
//     res.render("fooditems", { menuItems }); // Pass data to EJS
//   } catch (error) {
//     res.status(500).send("Error fetching food items");
//   }
// });
app.get("/fooditem", verifyToken, async (req, res) => {
  try {
    const menuItems = await MenuItem.find({ restroid: req.userId }); // Fetch items from MongoDB
    // console.log("Fetched menu items:", menuItems); // Debugging
    res.render("fooditems", { menuItems });
  } catch (error) {
    console.error("Error fetching food items:", error.message);
    res.status(500).send(`Error fetching food items: ${error.message}`); // Show actual error
  }
});

app.post("/fooditem", verifyToken, upload.single("image"), async (req, res) => {
  try {
    const { name, description, price, category } = req.body;
    const imageUrl = `/images/${req.file.filename}`; // Save image path
    const token = req.cookies.token;
    // const decoded = jwt.verify(token, JWT_SECRET);
    // const userId = decoded.userId;
    console.log("User ID from token:", req.userId);

    const newItem = await menuItem.create({
      name,
      description,
      price,
      category,
      imageUrl: imageUrl,
      restroid: req.userId,
    });
    res.redirect("/fooditem");
  } catch (error) {
    console.error("Error adding food item:", error);
    res.status(500).json({ message: "Error adding food item" });
  }
});


app.get("/profile", verifyToken, async (req, res) => {
  try {
    // Fetch user details from MongoDB using userId from token
    const totalItems = await menuItem.countDocuments({ restroid: req.userId });
    const user = await RestroData.findById(req.userId);
    const location = user.location;
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    // res.json(user);
    res.render("profile", { user, totalItems, location });
    // res.json({ user, totalItems, location });
  } catch (error) {
    console.error("Error fetching profile:", error);
    res.status(500).json({ message: "Error fetching profile data" });
  }
});



// edit user Credentials

// Handle form submission and save to MongoDB
app.post("/Get_item", async (req, res) => {
  try {
    console.log("Received Data:", req.body); // Log input data

    const newRestaurant = new RestroData(req.body);
    await newRestaurant.save();

    res.status(201).json({ message: "Restaurant Registered Successfully!" });
  } catch (error) {
    console.error("Error saving to database:", error);
    res.status(500).json({ message: "Error registering restaurant" });
  }
});

app.get("/fooditem/edit/:id", async (req, res) => {
  const fooditem = await MenuItem.findById(req.params.id);
  res.render("editFoodItem", {
    fooditem,
  });
});
app.get("/total-items", async (req, res) => {
  try {
    const totalItems = await FoodItem.countDocuments(); // Assuming FoodItem is your model
    res.json({ total: totalItems });
  } catch (error) {
    console.error("Error fetching total items:", error);
    res.status(500).json({ error: "Server error" });
  }
});

app.post("/fooditem/update", upload.single("image"), async (req, res) => {
  try {
    const { originalIndex, name, description, price, category } = req.body;
    const imageUrl = req.file ? `/images/${req.file.filename}` : undefined; // Check if a new image is uploaded

    // Update the item in the database
    await menuItem.updateOne(
      { _id: originalIndex }, // Assuming originalIndex is the ID of the item
      {
        name,
        description,
        price,
        category,
        ...(imageUrl && { imageUrl }), // Only update imageUrl if a new image is uploaded
      }
    );

    // res.status(200).json({ message: "Food item updated successfully" });
    res.redirect("/Dashboard");
  } catch (error) {
    console.error("Error updating food item:", error);
    // res.status(500).json({ message: "Error updating food item" });
  }
});

// edit route food
app.post("/fooditem/delete/:id", async (req, res) => {
  try {
    const { id } = req.params;

    // Find and delete the item
    await menuItem.findByIdAndDelete(id);

    console.log(`Food item with ID ${id} deleted.`);
    res.redirect("/Dashboard"); // Redirect to food items list after deletion
  } catch (error) {
    console.error("Error deleting food item:", error);
    res.redirect("/Dashboard"); // Redirect to food items list after deletion
  }
});

//edit profile
app.get("/profile/edit/:id", async (req, res) => {
  const user = await RestroData.findById(req.params.id);
  res.render("editProfile", {
    user,
  });
});
app.post("/profile/update", verifyToken, async (req, res) => {
  try {
    const { restaurantName, ownerName, phone, shopNo, floorNo, area, city } =
      req.body;
    // console.log("Received Data:", req.body); // Log input data
    // Find and update user profile
    const updatedUser = await RestroData.findByIdAndUpdate(
      req.userId, // Get user ID from token
      {
        restaurantName,
        ownerName,
        phone,
        location: { shopNo, floorNo, area, city },
      },
      { new: true } // Return the updated document
    );
    // Redirect to profile after update

    // res.json({ message: "Profile updated successfully", user: updatedUser });
    res.redirect("/profile"); // Redirect to profile after update
    
  } catch (error) {
    console.error("Error updating profile:", error);
    res.status(500).json({ message: "Error updating profile" });
  }
});

app.get("/menu/:id", async (req, res) => {
  try {
    let restroid = req.params.id;
    const restaurant = await Seller.findOne({ _id: restroid });
    console.log(restaurant);

    if (!restroid) {
      return res.status(404).send("Seller not found");
    }
    const menuItems = await Menu.find({ restroid: restaurant });

    console.log(menuItems);
    // res.render('homestyle-menu', { seller, menuItems, message: "" });

    // res.render('homestyle-menu', { seller });
  } catch (error) {
    console.error("Error fetching seller:", error);
    res.status(500).send("Server error");
  }
  
});
app.get("/logout", async (req, res) => {
  res.clearCookie("token");
  res.redirect("/");

});
app.get("/forget-password",async(req,res)=>{
  res.render('forgetpass')
});
app.post("/forgot-password", async (req, res) => {
  try {
      const { email } = req.body;
      const user = await RestroData.findOne({ email });

      if (!user) {
          return res.status(400).json({ message: "User not found" });
      }

      // Generate reset token
      const resetToken = crypto.randomBytes(32).toString("hex");
      user.resetPasswordToken = resetToken;
      user.resetPasswordExpire = Date.now() + 3600000; // 1 hour expiry

      await user.save();

      // Send email
      const transporter = nodemailer.createTransport({
          service: "Gmail",
          auth: {
              user: process.env.EMAIL_USER,
              pass: process.env.EMAIL_PASS,
          },
      });

      // const resetLink = http://localhost:3001/user/reset-password/${resetToken}; // Correctly formatted URL
      const resetLink = `http://localhost:3001/reset-password/${resetToken}`;

      const mailOptions = {
          to: user.email,
          subject: "Password Reset Request",
          // html: <p>Click <a href="${resetLink}">here to reset your password.</a></p>, // Use backticks for template literals
          html: `<p>Click <a href="${resetLink}">here to reset your password.</a></p>`,

        };

      await transporter.sendMail(mailOptions);

      res.json({ message: "Password reset email sent" });

  } catch (error) {
      console.error('Error sending password reset email:', error); // Log the error for debugging
      res.status(500).json({ message: "Internal Server Error", error :error.message}); // Send a generic error message
  }
});
// app.post("/reset-password/:token", async (req, res) => {
//   try {
//       const { token } = req.params;
//       const {Password} = req.body;

//       const user = await RestroData.findOne({ 
//           resetPasswordToken: token, 
//           resetPasswordExpire: { $gt: Date.now() } 
//       });
// console.log(user)
//       if (!user) {
//           return res.status(400).json({ message: "Invalid or expired token" });
//       }

//       // Hash new password
//       const salt = await bcrypt.genSalt(10);
//       user.password = await bcrypt.hash(Password, salt);

//       // Clear reset token
//       user.resetPasswordToken = undefined;
//       user.resetPasswordExpire = undefined;

//       await user.save();
      

//       res.json({ message: "Password reset successful" });

//   } catch (error) {
//     console.error('Error resetting password:', error);
//       res.status(500).json({ message: "Internal Server Error",error:error.message });
//   }
// });

app.post("/reset-password/:token", async (req, res) => {
  try {
      const { token } = req.params;
      const { password } = req.body; // Fix variable name

      console.log("Received request body:", req.body); // Debugging

      if (!password) {
          return res.status(400).json({ message: "Password is required" });
      }

      const user = await RestroData.findOne({ 
          resetPasswordToken: token, 
          resetPasswordExpire: { $gt: Date.now() } 
      });

      console.log("User found:", user);

      if (!user) {
          return res.status(400).json({ message: "Invalid or expired token" });
      }

      // Hash new password
      const salt = await bcrypt.genSalt(10);
      user.password = await bcrypt.hash(password, salt);

      // Clear reset token
      user.resetPasswordToken = undefined;
      user.resetPasswordExpire = undefined;

      await user.save();

      res.json({ message: "Password reset successful" });

  } catch (error) {
      console.error("Error resetting password:", error);
      res.status(500).json({ message: "Internal Server Error", error: error.message });
  }
});

app.get('/reset-password/:token', async (req, res) => {
  const { token } = req.params;
  const user = await RestroData.findOne({
      resetPasswordToken: token,
      resetPasswordExpire: { $gt: Date.now() }
  });

  if (!user) {
      return res.status(400).send('Invalid or expired token');
  }

  res.render('reset-password', { token }); // Render a view to reset the password
});
app.get("/booking", async (req, res) => {
  
});
app.use("/api", require("./Component/bookings.routes"));
// app.use("/api", require("./Component/menu.routes"));

// Start server
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
